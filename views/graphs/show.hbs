<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="/output.css" rel="stylesheet">
  <script src="https://code.highcharts.com/highcharts.js"></script>
  <script
    charset="utf-8"
    src="https://static.line-scdn.net/liff/edge/2/sdk.js"
  ></script>
</head>

<script>
  const LIFF_ID = "{{LIFF_ID}}";
  async function initializeLiff() {
    try {
      await liff.init({ liffId: LIFF_ID });
    } catch (error) {
      alert(`Error initializing LIFF:, ${error}`);
    }
  }

  // 0時からのミリ秒を時間:分に変換する関数
  const msToTime = function (s) {
    const pad = function (n, z) {
      z = z || 2;
      return ("00" + n).slice(-z);
    };
    const ms = s % 1000;
    s = (s - ms) / 1000;
    const secs = s % 60;
    s = (s - secs) / 60;
    const mins = s % 60;
    const hrs = (s - mins) / 60;
    return pad(hrs) + ":" + pad(mins);
  };

  window.addEventListener("DOMContentLoaded", async () => {
    await initializeLiff();
    const lineIdToken = await liff.getIDToken();
    const query = new URLSearchParams({ lineIdToken });
    const response = await fetch(`/api/getting-ups?${query}`);
    const responseData = await response.json();
    const labels = responseData.labels;
    const data = responseData.data;
    console.log(labels);
    console.log(data)

    // 小数点以下を切り捨てる関数
    function floorTo(value, base) {
      return Math.floor(value / base) * base;
    }

    // 小数点以下を切り上げる関数
    function ceilTo(value, base) {
      return Math.ceil(value / base) * base;
    }

    // データから最小値と最大値を取得
    let minValue = Infinity;
    let maxValue = -Infinity;
    data.forEach((val) => {
      if (val !== null && val !== undefined) {
        if (val < minValue) minValue = val;
        if (val > maxValue) maxValue = val;
      }
    });

    // データが存在しない場合のデフォルト値を設定
    if (minValue === Infinity) minValue = 6 * 3600000; // 6:00
    if (maxValue === -Infinity) maxValue = 9 * 3600000; // 9:00

    // y軸のminを1時間前、maxを1時間後に設定
    minValue = minValue - 3600000;
    maxValue = maxValue + 3600000;

    // 切りの良い値に調整
    minValue = floorTo(minValue, 1800000);
    maxValue = ceilTo(maxValue, 1800000);

    Highcharts.chart("container", {
        chart: {
          type: "line",
          scrollablePlotArea: {
            minWidth: labels.length * 50,  // 100は1データ点あたりの幅。調整が必要な場合はこの値を変更してください。
            scrollPositionX: 1
          }
        },
        title: {
          text: null
        },
        xAxis: {
          categories: labels,
        },
        yAxis: {
          min: minValue,
          max: maxValue,
          tickInterval: 1800000,
          title: {
            text: null
          },
          labels: {
            formatter: function() {
              return msToTime(this.value);
            }
          }
        },
        series: [{
          name: null,
          data,
          color: 'rgb(75, 192, 192)'
        }],
        tooltip: {
          formatter: function() {
            const pointTime = msToTime(this.y);
            return `<b>${this.x}</b><br>${pointTime}`;
          }
        },
        legend: {
          enabled: false
        },
      });
  });
</script>

<div class="h-screen" id="container">
</div>